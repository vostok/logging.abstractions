<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
using System;
using JetBrains.Annotations;
using Vostok.Commons.Time;
using Vostok.Logging.Abstractions.Helpers;

namespace Vostok.Logging.Abstractions
{
	[PublicAPI]
    public static class LogExtensions
    {
<#
    foreach (var level in new [] { "Debug", "Info", "Warn", "Error", "Fatal" })
    {
#>
        #region <#=level #>

        /// <summary>
        /// Logs the given <paramref name="messageTemplate"/> on the <see cref="LogLevel.<#=level #>"/> level without any additional properties.
        /// </summary>
        public static void <#=level #>(this ILog log, [CanBeNull] string messageTemplate)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            log.Log(new LogEvent(LogLevel.<#=level #>, PreciseDateTime.Now, messageTemplate));
        }

        /// <summary>
        /// Logs the given <paramref name="exception"/> on the <see cref="LogLevel.<#=level #>"/> level without a message or any additional properties.
        /// </summary>
        public static void <#=level #>(this ILog log, [CanBeNull] Exception exception)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            log.Log(new LogEvent(LogLevel.<#=level #>, PreciseDateTime.Now, null, exception));
        }

        /// <summary>
        /// Logs the given <paramref name="messageTemplate"/> and <paramref name="exception"/> on the <see cref="LogLevel.<#=level #>"/> level without any additional properties.
        /// </summary>
        public static void <#=level #>(this ILog log, [CanBeNull] Exception exception, [CanBeNull] string messageTemplate)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            log.Log(new LogEvent(LogLevel.<#=level #>, PreciseDateTime.Now, messageTemplate, exception));
        }

        /// <summary>
        /// Logs the given <paramref name="messageTemplate"/> on the <see cref="LogLevel.<#=level #>"/> level with given <paramref name="properties" />. The <paramref name="messageTemplate"/> can contain placeholders for <paramref name="properties"/>, see <see cref="LogEvent.MessageTemplate"/> for details.
        /// </summary>
        public static void <#=level #><T>(this ILog log, [CanBeNull] string messageTemplate, [CanBeNull] T properties)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            if (!DeconstructionHelper.ShouldDeconstruct(messageTemplate, properties))
            {
                log.<#=level #>(messageTemplate, (object)properties);
                return;
            }

            log.Log(new LogEvent(LogLevel.<#=level #>, PreciseDateTime.Now, messageTemplate, LogPropertiesExtensions.GenerateInitialObjectProperties(properties, true), null));
        }

        /// <summary>
        /// Logs the given <paramref name="messageTemplate"/> on the <see cref="LogLevel.<#=level #>"/> level with given <paramref name="parameters" />. The <paramref name="messageTemplate"/> can contain placeholders for <paramref name="parameters"/>, see <see cref="LogEvent.MessageTemplate"/> for details.
        /// </summary>
        public static void <#=level #>(this ILog log, [CanBeNull] string messageTemplate, [CanBeNull] params object[] parameters)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            log.Log(new LogEvent(LogLevel.<#=level #>, PreciseDateTime.Now, messageTemplate, LogEventExtensions.GenerateInitialParameters(messageTemplate, parameters), null));
        }

        /// <summary>
        /// Logs the given <paramref name="messageTemplate"/> and <paramref name="exception"/> on the <see cref="LogLevel.<#=level #>"/> level with given <paramref name="properties" />. The <paramref name="messageTemplate"/> can contain placeholders for <paramref name="properties"/>, see <see cref="LogEvent.MessageTemplate"/> for details.
        /// </summary>
        public static void <#=level #><T>(this ILog log, [CanBeNull] Exception exception, [CanBeNull] string messageTemplate, [CanBeNull] T properties)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            if (!DeconstructionHelper.ShouldDeconstruct(messageTemplate, properties))
            {
                log.<#=level #>(exception, messageTemplate, (object)properties);
                return;
            }

            log.Log(new LogEvent(LogLevel.<#=level #>, PreciseDateTime.Now, messageTemplate, LogPropertiesExtensions.GenerateInitialObjectProperties(properties, true), exception));
        }

        /// <summary>
        /// Logs the given <paramref name="messageTemplate"/> and <paramref name="exception"/> on the <see cref="LogLevel.<#=level #>"/> level with given <paramref name="parameters" />. The <paramref name="messageTemplate"/> can contain placeholders for <paramref name="parameters"/>, see <see cref="LogEvent.MessageTemplate"/> for details.
        /// </summary>
        public static void <#=level #>(this ILog log, [CanBeNull] Exception exception, [CanBeNull] string messageTemplate, [CanBeNull] params object[] parameters)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            log.Log(new LogEvent(LogLevel.<#=level #>, PreciseDateTime.Now, messageTemplate, LogEventExtensions.GenerateInitialParameters(messageTemplate, parameters), exception));
        }

        [Obsolete("Use the <#=level #>(ILog, Exception, string) overload instead.")]
        public static void <#=level #>(this ILog log, [CanBeNull] string messageTemplate, [CanBeNull] Exception exception)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            log.<#=level #>(exception, messageTemplate);
        }

        /// <summary>
        /// Returns true if given <paramref name="log"/> is enabled to log events of <see cref="LogLevel.<#=level #>"/> level, or false otherwise.
        /// </summary>
        public static bool IsEnabledFor<#=level #>(this ILog log)
        {
            return log.IsEnabledFor(LogLevel.<#=level #>);
        }

        #endregion

<#
    }
#>
    }
}