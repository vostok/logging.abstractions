<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
using System;
using JetBrains.Annotations;

namespace Vostok.Logging.Abstractions
{
    public static class LogExtensions
    {
<#
    foreach (var level in new [] { "Debug", "Info", "Warn", "Error", "Fatal" })
    {
#>
        #region <#=level #>

        public static void <#=level #>(this ILog log, [CanBeNull] string message)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            log.Log(new LogEvent(LogLevel.<#=level #>, DateTimeOffset.UtcNow, message));
        }

        public static void <#=level #>(this ILog log, [CanBeNull] Exception exception)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            log.Log(new LogEvent(LogLevel.<#=level #>, DateTimeOffset.UtcNow, null, exception));
        }

        public static void <#=level #>(this ILog log, [CanBeNull] Exception exception, [CanBeNull] string message)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            log.Log(new LogEvent(LogLevel.<#=level #>, DateTimeOffset.UtcNow, message, exception));
        }

        [StringFormatMethod("messageTemplate")]
        public static void <#=level #><T>(this ILog log, [CanBeNull] string messageTemplate, [CanBeNull] T properties)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            if (!typeof(T).IsConstructedGenericType)
            {
                log.<#=level #>(messageTemplate, (object)properties);
                return;
            }

            log.Log(new LogEvent(LogLevel.<#=level #>, DateTimeOffset.UtcNow, messageTemplate).WithObjectProperties(properties));
        }

        [StringFormatMethod("messageTemplate")]
        public static void <#=level #>(this ILog log, [CanBeNull] string messageTemplate, [CanBeNull] params object[] parameters)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            log.Log(new LogEvent(LogLevel.<#=level #>, DateTimeOffset.UtcNow, messageTemplate).WithParameters(parameters));
        }

        [StringFormatMethod("messageTemplate")]
        public static void <#=level #><T>(this ILog log, [CanBeNull] Exception exception, [CanBeNull] string messageTemplate, [CanBeNull] T properties)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            if (!typeof(T).IsConstructedGenericType)
            {
                log.<#=level #>(exception, messageTemplate, (object)properties);
                return;
            }

            log.Log(new LogEvent(LogLevel.<#=level #>, DateTimeOffset.UtcNow, messageTemplate, exception).WithObjectProperties(properties));
        }

        [StringFormatMethod("messageTemplate")]
        public static void <#=level #>(this ILog log, [CanBeNull] Exception exception, [CanBeNull] string messageTemplate, [CanBeNull] params object[] parameters)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            log.Log(new LogEvent(LogLevel.<#=level #>, DateTimeOffset.UtcNow, messageTemplate, exception).WithParameters(parameters));
        }

        [Obsolete]
        public static void <#=level #>(this ILog log, [CanBeNull] string message, [CanBeNull] Exception exception)
        {
            if (!log.IsEnabledFor(LogLevel.<#=level #>))
                return;

            log.<#=level #>(exception, message);
        }

        #endregion

<#
    }
#>
    }
}